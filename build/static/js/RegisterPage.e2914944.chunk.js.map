{"version":3,"file":"static/js/RegisterPage.e2914944.chunk.js","mappings":"yPACA,EAAwB,4BAAxB,EAA8D,8BAA9D,EAAoG,4BAApG,EAAwI,4BAAxI,EAAmL,mC,8ECY7KA,EAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAENC,EAAkB,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCACxD,OAAQA,EAAOC,MACb,IAAK,OACH,OAAO,kBAAKF,GAAZ,IAAmBJ,KAAMK,EAAOE,UAClC,IAAK,QACH,OAAO,kBAAKH,GAAZ,IAAmBH,MAAOI,EAAOE,UACnC,IAAK,WACH,OAAO,kBAAKH,GAAZ,IAAmBF,SAAUG,EAAOE,UACtC,IAAK,QACH,OAAOR,EACT,QACE,OAAOK,IAuGb,EAnGqB,WACnB,OAA0BI,EAAAA,EAAAA,YAAWL,EAAiBJ,GAAtD,eAAOK,EAAP,KAAcK,EAAd,KACMC,EAAcC,IAAAA,WACdC,EAAeD,IAAAA,WACfE,EAAkBF,IAAAA,WAExB,IADiBG,EAAAA,EAAAA,OAIbC,EAAAA,EAAAA,OAHJ,eACEC,EADF,YAEIC,EAFJ,EAEIA,KAGEC,GALN,EAEUC,UAFV,EAEoCC,SAGdC,EAAAA,EAAAA,OAGhBC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBxB,EAAR,EAAQA,KAAMyB,EAAd,EAAcA,MACdhB,EAAS,CAAEH,KAAMN,EAAMO,QAASkB,KA0BlC,OACE,iCACE,eAAIC,UAAWC,EAAf,uBACA,kBAAMC,SAzBW,SAAAC,GACnBA,EAAEC,iBACFd,EAAQZ,GAERc,GAAca,EAAAA,EAAAA,IAAcd,IAE5BR,EAAS,CAAEH,KAAM,WAmBeoB,UAAWC,EAAzC,WACE,kBAAOK,QAAStB,EAAagB,UAAWC,EAAxC,mBAGA,kBACErB,KAAK,OACLN,KAAK,OACLiC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRV,MAAOrB,EAAMJ,KACboC,SAAUd,EACVe,GAAI3B,EACJgB,UAAWC,KAGb,kBAAOK,QAASpB,EAAcc,UAAWC,EAAzC,oBAGA,kBACErB,KAAK,QACLN,KAAK,QACLiC,QAAQ,gLACRC,MAAM,+FACNC,UAAQ,EACRV,MAAOrB,EAAMH,MACbmC,SAAUd,EACVe,GAAIzB,EACJc,UAAWC,KAEb,kBAAOK,QAASnB,EAAiBa,UAAWC,EAA5C,uBAGA,kBACErB,KAAK,OACLN,KAAK,WAGLmC,UAAQ,EACRV,MAAOrB,EAAMF,SACbkC,SAAUd,EACVe,GAAIxB,EACJa,UAAWC,KAEb,gBAAKD,UAAWC,EAAhB,UACE,SAACW,EAAA,EAAD,CAAQJ,MAAM,WAAW5B,KAAK,iBAIlC,SAAC,KAAD,CAAgBiC,UAAW,UCjHjC,EAVqB,YACNC,EAAAA,EAAAA,IAAYC,EAAAA,GACzB,OACE,+BACE,SAAC,EAAD","sources":["webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"RegisterForm_title__hVU3x\",\"wrapper\":\"RegisterForm_wrapper__V0tzd\",\"label\":\"RegisterForm_label__EZZ8Y\",\"input\":\"RegisterForm_input__-vNEl\",\"btn__wrapper\":\"RegisterForm_btn__wrapper__lpQTY\"};","import React, { useReducer } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport s from './RegisterForm.module.css';\r\nimport shortid from 'shortid';\r\nimport { useAddUserMutation } from 'redux/auth/authApi';\r\nimport { myActionToken, loggedOn, loggedOut } from 'redux/auth/token-reduser';\r\nimport { getIsLogged, getToken } from 'redux/auth/token-selectors';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { toast } from 'react-toastify';\r\nimport Button from 'components/Button/Button';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  email: '',\r\n  password: '',\r\n};\r\nconst registerReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'name':\r\n      return { ...state, name: action.payload };\r\n    case 'email':\r\n      return { ...state, email: action.payload };\r\n    case 'password':\r\n      return { ...state, password: action.payload };\r\n    case 'reset':\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst RegisterForm = () => {\r\n  const [state, dispatch] = useReducer(registerReducer, initialState);\r\n  const nameInputId = shortid.generate();\r\n  const emailInputId = shortid.generate();\r\n  const passwordInputId = shortid.generate();\r\n  const navigate = useNavigate();\r\n  const [\r\n    addUser,\r\n    { data, isLoading: isLoadingUser, isError: isErrorUser },\r\n  ] = useAddUserMutation();\r\n\r\n  const dispatchToken = useDispatch();\r\n\r\n  // записує в локальний стейт и`мя, пошту та пароль\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    dispatch({ type: name, payload: value });\r\n  };\r\n\r\n  // при натискання на кнопку локальний стейт передається як аргумент до функції addUser, форма очищується\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    addUser(state);\r\n    // const { token, user } = data;\r\n    dispatchToken(myActionToken(data));\r\n\r\n    dispatch({ type: 'reset' });\r\n  };\r\n\r\n  // const handleSubmit = async data => {\r\n  //   try {\r\n  //     const response = await addUser(state);\r\n  //     console.log(response);\r\n  //     dispatchToken(myActionToken(response));\r\n  //     dispatchToken(loggedOn());\r\n  //     dispatch({ type: 'reset' });\r\n  //     navigate('/phonebook');\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h1 className={s.title}>Register</h1>\r\n      <form onSubmit={handleSubmit} className={s.wrapper}>\r\n        <label htmlFor={nameInputId} className={s.label}>\r\n          Name\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          value={state.name}\r\n          onChange={handleChange}\r\n          id={nameInputId}\r\n          className={s.input}\r\n        />\r\n\r\n        <label htmlFor={emailInputId} className={s.label}>\r\n          Email\r\n        </label>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          pattern=\"([A-zА-я])+([0-9\\-_\\+\\.])*([A-zА-я0-9\\-_\\+\\.])*@([A-zА-я])+([0-9\\-_\\+\\.])*([A-zА-я0-9\\-_\\+\\.])*[\\.]([A-zА-я])+\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n          value={state.email}\r\n          onChange={handleChange}\r\n          id={emailInputId}\r\n          className={s.input}\r\n        />\r\n        <label htmlFor={passwordInputId} className={s.label}>\r\n          Password\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"password\"\r\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n          value={state.password}\r\n          onChange={handleChange}\r\n          id={passwordInputId}\r\n          className={s.input}\r\n        />\r\n        <div className={s.btn__wrapper}>\r\n          <Button title=\"Register\" type=\"submit\" />\r\n        </div>\r\n      </form>\r\n\r\n      <ToastContainer autoClose={2000} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import { useSelector } from 'react-redux';\r\nimport { getIsLogged } from 'redux/auth/token-selectors';\r\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  const flag = useSelector(getIsLogged);\r\n  return (\r\n    <>\r\n      <RegisterForm />\r\n    </>\r\n  );\r\n  // return <>{!flag ? <RegisterForm /> : ''}</>;\r\n};\r\n\r\nexport default RegisterPage;\r\n"],"names":["initialState","name","email","password","registerReducer","state","action","type","payload","useReducer","dispatch","nameInputId","shortid","emailInputId","passwordInputId","useNavigate","useAddUserMutation","addUser","data","dispatchToken","isLoading","isError","useDispatch","handleChange","event","target","value","className","s","onSubmit","e","preventDefault","myActionToken","htmlFor","pattern","title","required","onChange","id","Button","autoClose","useSelector","getIsLogged"],"sourceRoot":""}